{"ast":null,"code":"import { db } from \"./firebase\";\nimport { collection, addDoc, getDocs, updateDoc, deleteDoc, doc } from \"firebase/firestore\";\nconst TASKS_COLLECTION = \"tasks\";\n\n/**\r\n * Fetch all tasks from the Firestore database.\r\n * @returns {Promise<Array>} A promise that resolves to an array of tasks.\r\n */\nexport const getTasks = async () => {\n  const tasksCollection = collection(db, TASKS_COLLECTION);\n  const snapshot = await getDocs(tasksCollection);\n  return snapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data()\n  }));\n};\n\n/**\r\n * Add a new task to the Firestore database.\r\n * @param {Object} task - The task object containing title and description.\r\n * @returns {Promise<Object>} A promise that resolves to the added task with its ID.\r\n */\nexport const addTask = async task => {\n  const tasksCollection = collection(db, TASKS_COLLECTION);\n  const docRef = await addDoc(tasksCollection, task);\n  return {\n    id: docRef.id,\n    ...task\n  };\n};\n\n/**\r\n * Update an existing task in the Firestore database.\r\n * @param {string} id - The ID of the task to update.\r\n * @param {Object} updatedTask - The updated task data.\r\n * @returns {Promise<void>}\r\n */\nexport const updateTask = async (id, updatedTask) => {\n  const taskDoc = doc(db, TASKS_COLLECTION, id);\n  await updateDoc(taskDoc, updatedTask);\n};\n\n/**\r\n * Delete a task from the Firestore database.\r\n * @param {string} id - The ID of the task to delete.\r\n * @returns {Promise<void>}\r\n */\nexport const deleteTask = async id => {\n  const taskDoc = doc(db, TASKS_COLLECTION, id);\n  await deleteDoc(taskDoc);\n};","map":{"version":3,"names":["db","collection","addDoc","getDocs","updateDoc","deleteDoc","doc","TASKS_COLLECTION","getTasks","tasksCollection","snapshot","docs","map","id","data","addTask","task","docRef","updateTask","updatedTask","taskDoc","deleteTask"],"sources":["D:/InterShip_Projects/Crack_Intership_Project/task-manager/src/services/api.js"],"sourcesContent":["import { db } from \"./firebase\";\r\nimport { collection, addDoc, getDocs, updateDoc, deleteDoc, doc } from \"firebase/firestore\";\r\n\r\nconst TASKS_COLLECTION = \"tasks\";\r\n\r\n/**\r\n * Fetch all tasks from the Firestore database.\r\n * @returns {Promise<Array>} A promise that resolves to an array of tasks.\r\n */\r\nexport const getTasks = async () => {\r\n  const tasksCollection = collection(db, TASKS_COLLECTION);\r\n  const snapshot = await getDocs(tasksCollection);\r\n  return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\r\n};\r\n\r\n/**\r\n * Add a new task to the Firestore database.\r\n * @param {Object} task - The task object containing title and description.\r\n * @returns {Promise<Object>} A promise that resolves to the added task with its ID.\r\n */\r\nexport const addTask = async (task) => {\r\n  const tasksCollection = collection(db, TASKS_COLLECTION);\r\n  const docRef = await addDoc(tasksCollection, task);\r\n  return { id: docRef.id, ...task };\r\n};\r\n\r\n/**\r\n * Update an existing task in the Firestore database.\r\n * @param {string} id - The ID of the task to update.\r\n * @param {Object} updatedTask - The updated task data.\r\n * @returns {Promise<void>}\r\n */\r\nexport const updateTask = async (id, updatedTask) => {\r\n  const taskDoc = doc(db, TASKS_COLLECTION, id);\r\n  await updateDoc(taskDoc, updatedTask);\r\n};\r\n\r\n/**\r\n * Delete a task from the Firestore database.\r\n * @param {string} id - The ID of the task to delete.\r\n * @returns {Promise<void>}\r\n */\r\nexport const deleteTask = async (id) => {\r\n  const taskDoc = doc(db, TASKS_COLLECTION, id);\r\n  await deleteDoc(taskDoc);\r\n};\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,YAAY;AAC/B,SAASC,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAAEC,SAAS,EAAEC,SAAS,EAAEC,GAAG,QAAQ,oBAAoB;AAE3F,MAAMC,gBAAgB,GAAG,OAAO;;AAEhC;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMC,eAAe,GAAGR,UAAU,CAACD,EAAE,EAAEO,gBAAgB,CAAC;EACxD,MAAMG,QAAQ,GAAG,MAAMP,OAAO,CAACM,eAAe,CAAC;EAC/C,OAAOC,QAAQ,CAACC,IAAI,CAACC,GAAG,CAAEN,GAAG,KAAM;IAAEO,EAAE,EAAEP,GAAG,CAACO,EAAE;IAAE,GAAGP,GAAG,CAACQ,IAAI,CAAC;EAAE,CAAC,CAAC,CAAC;AACpE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAG,MAAOC,IAAI,IAAK;EACrC,MAAMP,eAAe,GAAGR,UAAU,CAACD,EAAE,EAAEO,gBAAgB,CAAC;EACxD,MAAMU,MAAM,GAAG,MAAMf,MAAM,CAACO,eAAe,EAAEO,IAAI,CAAC;EAClD,OAAO;IAAEH,EAAE,EAAEI,MAAM,CAACJ,EAAE;IAAE,GAAGG;EAAK,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAOL,EAAE,EAAEM,WAAW,KAAK;EACnD,MAAMC,OAAO,GAAGd,GAAG,CAACN,EAAE,EAAEO,gBAAgB,EAAEM,EAAE,CAAC;EAC7C,MAAMT,SAAS,CAACgB,OAAO,EAAED,WAAW,CAAC;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,UAAU,GAAG,MAAOR,EAAE,IAAK;EACtC,MAAMO,OAAO,GAAGd,GAAG,CAACN,EAAE,EAAEO,gBAAgB,EAAEM,EAAE,CAAC;EAC7C,MAAMR,SAAS,CAACe,OAAO,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}